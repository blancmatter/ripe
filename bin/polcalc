#!/usr/bin/perl 


# Script to go through Phot data and perform calculations on data


# PERL MODULES WE WILL BE USING
use DBI;
use DBD::mysql;
use File::Copy;
use lib '/home/dma/ripe/lib';
use ripe;
use Math::Trig;
use Math::Complex;
$pi = 3.14159265;
$counter =0;
$DEBUG=1;

if ($DEBUG) {
	open DEBUG,  ">debug.log";
}





# Calibration Switches
# Calibrate = 0 --> No calibration
# Calibrate = 1 --> Stokes q, u offest calibration
# Calibrate = 2 --> A1, B1 ...... C2, D2 calibration
# Calibrate = 3 --> Grab q and u stokes offsets from nearby the date
# Apply a stokes scaling parameter. It is found that q * 1.1 provides better polrings
$calibrate = 3;




# If you want the zeropints outputed to a file from $calibrate = 3
$output_z = 0;

if ($output_z){
	open ZPOL,  ">>zpol.log";
	print ZPOL "#camera\tmjd\tq\tu\tq_err\tu_err\n";
}



# Mode switches
# Mode = 1 --> Calibrate all sources
# Mode = 2 --> Calibrate identified standard sources only
$mode = 2;

# Ellipse Correction = 1 --> Apply a stokes scaling parameter. It is found that q * 1.14 provides better polrings
# Ellipse Correction = 2 --> Modify values to correct for ellipse of ellipticity E (0 -> 1) and ellipse angle theta
$ellipse_correction = 2;


$q_scaling_factor = 1.145;
$u_scaling_factor = 1.0;


$E = 0.14; #Ellipticity
$theta = 92; #Degrees
$theta = $theta / 180 * $pi;


$q_zeropoint = -0.0031631; #2011/12 average zeropint
$u_zeropoint = 0.0290815; #2011/12 average zeropoint
$q_zeropoint_error = 0.0000;
$u_zeropoint_error = 0.0000;





              
$A1_correction = 0.9786;
$B1_correction = 1.0245;
$C1_correction = 1.0258;
$D1_correction = 0.9753;
$A2_correction = 0.9723;
$B2_correction = 1.0115;
$C2_correction = 1.0224;
$D2_correction = 0.9895;

  if ($calibrate){
      print "Running with Calibration options\n\n";
    }






# Open connection
ripe::db_connect();

#Prepare input quiery
$input = $ripe::DB_grb->prepare('UPDATE photdata SET S1 = ?, S2 = ?, S3 = ?, q = ?, u = ?, q_err = ?, u_err = ?, p = ?, p_err_minus = ?, p_err_plus = ?, beta = ?, beta_err = ? WHERE id = ?'); 

#Grab data
if ($mode == 1) { # Calculate everything
	$grab=$ripe::DB_grb->prepare("Select id, a1, b1, c1, d1, a2, b2, c2, d2, a1_err, b1_err, c1_err, d1_err, a2_err, b2_err, c2_err, d2_err, p, target, mjd, camera, xpix, ypix from photdata, obs where obs_id_link=obs_id and tag_link=tag");
}

if ($mode == 2) { # Calculate targets only
	$grab=$ripe::DB_grb->prepare("Select id, a1, b1, c1, d1, a2, b2, c2, d2, a1_err, b1_err, c1_err, d1_err, a2_err, b2_err, c2_err, d2_err, p, target, mjd, camera, xpix, ypix from photdata, obs where obs_id_link=obs_id and tag_link=tag and target is not null");
}

$grab->execute(); 


  
#go through each row  
while (@data = $grab->fetchrow_array()){
	
	$id = $data[0];            
	$a1 = $data[1];            
	$b1 = $data[2];            
	$c1 = $data[3];            
	$d1 = $data[4];            
	$a2 = $data[5];            
	$b2 = $data[6];            
	$c2 = $data[7];            
	$d2 = $data[8];            
	$a1_err = $data[9];            
	$b1_err = $data[10];           
	$c1_err = $data[11];           
	$d1_err = $data[12];           
	$a2_err = $data[13];           
	$b2_err = $data[14];           
	$c2_err = $data[15];           
	$d2_err = $data[16];
	$pol = $data[17];
	$target = $data[18];
	$mjd = $data[19];
	$camera = $data[20];
	$xpix = $data[21];
	$ypix = $data[22];
	
	if ($calibrate == 2) {
		$a1 /= $A1_correction;
		$b1 /= $B1_correction;
		$c1 /= $C1_correction;
		$d1 /= $D1_correction;
		$a2 /= $A2_correction;
		$b2 /= $B2_correction;
		$c2 /= $C2_correction;
		$d2 /= $D2_correction;
	}

	
	$s1 = $a1 + $a2 + $b1 + $b2 + $c1 + $c2 + $d1 + $d2;
	$s2 = $a1 + $a2 + $b1 + $b2;
	$s3 = $b1 + $b2 + $c1 + $c2;
	
	$s1_err = sqrt(($a1_err**2)+($a2_err**2)+($b1_err**2)+($b2_err**2)+($c1_err**2)+($c2_err**2)+($d1_err**2)+($d2_err**2));
	$s2_err = sqrt(($a1_err**2)+($a2_err**2)+($b1_err**2)+($b2_err**2));  
	$s3_err = sqrt(($b1_err**2)+($b2_err**2)+($c1_err**2)+($c2_err**2));
	
	print "Running on ID: $id\n";
	# calculate q and u
	$q = $pi * (0.5 - ($s3/$s1));
	$u = $pi * (($s2/$s1) - 0.5);
	
	$q_err = $pi * sqrt( (($s3_err / $s1)**2) + (($s1_err * $s3 / ($s1**2))**2));
	$u_err = $pi * sqrt( (($s2_err / $s1)**2) + (($s1_err * $s2 / ($s1**2))**2));
	
	# Apply calibration options for q and u
	if ($calibrate == 1){ #calibration from zero polarised spreads.

		$q += -$q_zeropoint;
		$u += -$u_zeropoint;  

		$q_err_prev = $q_err;
		$u_err_prev = $u_err;
		
		$q_err = sqrt (($q_err_prev ** 2) + ($q_zeropoint_error ** 2));
		$u_err = sqrt (($u_err_prev ** 2) + ($u_zeropoint_error ** 2));
	
	}
	
	if ($calibrate == 3){ # Calibration of q and u taken from an n day spread around observation
	
		
		($q_zeropoint, $u_zeropoint, $q_zeropoint_error, $u_zeropoint_error) = ripe::get_zeropoints($mjd, $camera, 2);
		if ($output_z){
                open ZPOL,  ">>zpol.log";
                print ZPOL "$camera\t$mjd\t$q_zeropoint\t$u_zeropoint\t$q_zeropoint_error\t$u_zeropoint_error\n";
                }


		
		$q += -$q_zeropoint;
		$u += -$u_zeropoint;  

		$q_err_prev = $q_err;
		$u_err_prev = $u_err;
		
		$q_err = sqrt (($q_err_prev ** 2) + ($q_zeropoint_error ** 2));
		$u_err = sqrt (($u_err_prev ** 2) + ($u_zeropoint_error ** 2));
		
	}
	
	
	
	if ($ellipse_correction == 1) {
		print "SCALING\n";
		
		$q *= $q_scaling_factor;
		$u *= $u_scaling_factor;
		
		$q_err *= $q_scaling_factor;
		$u_err *= $u_scaling_factor;
	}
	
	
	if ($ellipse_correction == 2) {
		# All this is in a RINGO polarimetric data reduction document D.Arnold Jan 2015
		$phi = atan2($u, $q) - $theta;
		$sqrt_r = $q**2+$u**2;
		$a = sqrt($sqrt_r / ((cos($phi)**2) + ((1-(2*$E)+($E**2)) * (sin($phi)**2))));
		$delta_b = $a * $E * sin($phi);
		if ($DEBUG) {
			print DEBUG "$q\t$u\t$phi\t$a\t$r\n";
		}
		$q -= $delta_b * sin($theta); 
		$u += $delta_b * cos($theta);
	}
		
	
	# Calculate polarisation and angle
	$pol = sqrt(($q**2)+($u**2));
	
	
	print "$target\n";
	if (1) {
		$pol_err_minus = $pol * 0.5 * ((sqrt( ((2 * $q_err * $q)**2) + ((2 * $u_err * $u)**2))) / (($q*$q)+($u*$u)));
		$pol_err_plus = $pol_err_minus;
	}
	
	else
	{ # Do monte carlo analysis
		print "Target detected. Doing Monte Carlo Errors\n";
		($pol, $pol_err_minus, $pol_err_plus) = ripe::mcerror($q, $u, $q_err, $u_err);
	}
	
	if ($q != 0 && $u != 0) { # Stops division by zero.
		$beta = (atan2 $u,$q) / 2; # See atan2 and why the normal atan function does not work here.
		$uOVERq_err = sqrt ((($u_err / $u)**2) + (($q_err / $q)**2)) * ($u / $q);
		$beta_err = $uOVERq_err / (1 + (($u / $q)**2)) / (2 * $pi) * 360;
		$beta_deg = (($beta / (2 * $pi)) * 360) + 90;
	}
	
	
	# Grab and apply pol correcttion on field
	$polcor = 0;
	
	if ($polcor) {
		$pol_correction = ripe::field_correct($xpix, $ypix);
		$pol -= $pol_correction;
	}
	
	# print "$id\n"; 
	$input->execute($s1, $s2, $s3, $q, $u, $q_err, $u_err, $pol, $pol_err_minus, $pol_err_plus, $beta_deg, $beta_err, $id);
	$counter++;
	print "Processed:\t$counter\n\n";

}
  
  
  
  
  
