#!/usr/bin/perl 


# Script to go through Phot data and perform calculations on data


# PERL MODULES WE WILL BE USING
use DBI;
use DBD::mysql;
use File::Copy;
use lib '/home/disrail/ripe/lib';
use ripe;
use Math::Trig;
use Math::Complex;
$pi = 3.14159265;
$counter =0;

# Debug options 
$DEBUG = 0;




# Calibration Switches
# Calibrate = 0 --> No calibration
# Calibrate = 1 --> Stokes q, u offest calibration
# Calibrate = 2 --> A1, B1 ...... C2, D2 calibration (i.e. calibration of each rotational bin)
$calibrate = 0;
$recalc = 1;

	if ($calibrate){print "Running with Calibration options\n";}
    
	if ($recalc){print "Recalculating all data\n";} 
    


    
    
    
### IMPORTANT CALIBRATION INFORMATION        
### ZEROPOINTS are the values of q and u obtained when zero polarised sources are measured
### CORRECTIONS are calculated for each orientation from an equation such as A1 / (S1 / 8)


##########################################
########  RINGO 2 Calibration ############
##########################################



$pq_zeropoint = 0.0019; #120308 zeropint
$pu_zeropoint = 0.0293; #120308 zeropoint
$pq_zeropoint_error = 0.0012;
$pu_zeropoint_error = 0.0013;

$pA1_correction = 1.0193;
$pB1_correction = 1.0181;
$pC1_correction = 0.9825;
$pD1_correction = 0.9753;
$pA2_correction = 1.0235;
$pB2_correction = 1.0137;
$pC2_correction = 0.9807;
$pD2_correction = 0.9867;



##########################################
########  RINGO 3 Calibration ############
##########################################


# Zeropoints from first commisioning
$dq_zeropoint = 0.0093;
$du_zeropoint = 0.0371;
$dq_zeropoint_error = 0;
$du_zeropoint_error = 0;

$dA1_correction = 1.0273;
$dB1_correction = 1.0178;
$dC1_correction = 0.9679;
$dD1_correction = 0.9735;
$dA2_correction = 1.0345;
$dB2_correction = 1.0158;
$dC2_correction = 0.9715;
$dD2_correction = 0.9917;

# Zeropoints from first commisioning
$eq_zeropoint = -0.0388;
$eu_zeropoint = -0.0643;
$eq_zeropoint_error = 0;
$eu_zeropoint_error = 0;

$eA1_correction = 0.9398;
$eB1_correction = 0.9883;
$eC1_correction = 1.0524;
$eD1_correction = 1.0240;
$eA2_correction = 0.9247;
$eB2_correction = 0.9671;
$eC2_correction = 1.0505;
$eD2_correction = 1.0531;

# Zeropoints from first commisioning
$fq_zeropoint = -0.0059;
$fu_zeropoint = 0.0011;
$fq_zeropoint_error = 0;
$fu_zeropoint_error = 0;

$fA1_correction = 0.9821;
$fB1_correction = 1.0050;
$fC1_correction = 1.0055;
$fD1_correction = 1.0016;
$fA2_correction = 0.9915;
$fB2_correction = 0.9962;
$fC2_correction = 1.0056;
$fD2_correction = 1.0125;




############################################
############  MAIN CODE ####################
############################################

# Open connection
ripe::db_connect();

#Prepare input quiery
$input = $ripe::DB_grb->prepare('UPDATE photdata SET S1 = ?, S2 = ?, S3 = ?, q = ?, u = ?, q_err = ?, u_err = ?, p = ?, p_err_minus = ?, p_err_plus = ?, beta = ?, beta_err = ? WHERE id = ?'); 

#Grab data
$grab= $ripe::DB_grb->prepare('Select id, object, obs_id_link, a1, b1, c1, d1, a2, b2, c2, d2, a1_err, b1_err, c1_err, d1_err, a2_err, b2_err, c2_err, d2_err, p from photdata, obs where obs_id = obs_id_link');
$grab->execute(); 


  
#go through each row  
while (@data = $grab->fetchrow_array()){
  
         $id = $data[0];
     $object = $data[1];
     $obs_id = $data[2];
         $a1 = $data[3];            
         $b1 = $data[4];            
         $c1 = $data[5];            
         $d1 = $data[6];            
         $a2 = $data[7];            
         $b2 = $data[8];            
         $c2 = $data[9];            
         $d2 = $data[10];            
     $a1_err = $data[11];            
     $b1_err = $data[12];           
     $c1_err = $data[13];           
     $d1_err = $data[14];           
     $a2_err = $data[15];           
     $b2_err = $data[16];           
     $c2_err = $data[17];           
     $d2_err = $data[18];
        $pol = $data[19];
    

	
	if ($pol == 0 || $recalc) { # If it hasn't been calculated or recalc is set
		
		if ($calibrate == 2) { # Calibraton applying rotation corrections
			
			if ($obs_id =~ /d_e/) {
				
				$a1 /= $dA1_correction;
				$b1 /= $dB1_correction;
				$c1 /= $dC1_correction;
				$d1 /= $dD1_correction;
				$a2 /= $dA2_correction;
				$b2 /= $dB2_correction;
				$c2 /= $dC2_correction;
				$d2 /= $dD2_correction;
			}

			
			if ($obs_id =~ /e_e/) {
				
				$a1 /= $eA1_correction;
				$b1 /= $eB1_correction;
				$c1 /= $eC1_correction;
				$d1 /= $eD1_correction;
				$a2 /= $eA2_correction;
				$b2 /= $eB2_correction;
				$c2 /= $eC2_correction;
				$d2 /= $eD2_correction;
			}
			
			
			if ($obs_id =~ /f_e/) {
				$a1 /= $fA1_correction;
				$b1 /= $fB1_correction;
				$c1 /= $fC1_correction;
				$d1 /= $fD1_correction;
				$a2 /= $fA2_correction;
				$b2 /= $fB2_correction;
				$c2 /= $fC2_correction;
				$d2 /= $fD2_correction;
				print "$a1\n";
			}
			
			if ($obs_id =~ /p_e/) {
				
				$a1 /= $pA1_correction;
				$b1 /= $pB1_correction;
				$c1 /= $pC1_correction;
				$d1 /= $pD1_correction;
				$a2 /= $pA2_correction;
				$b2 /= $pB2_correction;
				$c2 /= $pC2_correction;
				$d2 /= $pD2_correction;
			}
		}
	
		
		$s1 = $a1 + $a2 + $b1 + $b2 + $c1 + $c2 + $d1 + $d2;
		$s2 = $a1 + $a2 + $b1 + $b2;
		$s3 = $b1 + $b2 + $c1 + $c2;
 
		$s1_err = sqrt(($a1_err**2)+($a2_err**2)+($b1_err**2)+($b2_err**2)+($c1_err**2)+($c2_err**2)+($d1_err**2)+($d2_err**2));
		$s2_err = sqrt(($a1_err**2)+($a2_err**2)+($b1_err**2)+($b2_err**2));  
		$s3_err = sqrt(($b1_err**2)+($b2_err**2)+($c1_err**2)+($c2_err**2));
  
  
		# calculate q and u
		$q = $pi * (0.5 - ($s3/$s1));
		$u = $pi * (($s2/$s1) - 0.5);
    
		$q_err = $pi * sqrt( (($s3_err / $s1)**2) + (($s1_err * $s3 / ($s1**2))**2));
		$u_err = $pi * sqrt( (($s2_err / $s1)**2) + (($s1_err * $s2 / ($s1**2))**2));
  
		# Apply calibration options for q and u
		if ($calibrate == 1){ #calibration from zero polarised values
			
			if ($obs_id =~ /d_e/) {
				$q += -$dq_zeropoint;
				$u += -$du_zeropoint;
			}
			
			if ($obs_id =~ /e_e/) {
				$q += -$eq_zeropoint;
				$u += -$eu_zeropoint;
			}
			
     
			if ($obs_id =~ /f_e/) {
				$q += -$fq_zeropoint;
				$u += -$fu_zeropoint;
			}
			
			if ($obs_id =~ /p_e/) {
				$q += -$pq_zeropoint;
				$u += -$pu_zeropoint;
			}

			
		}
		
		# Calculate polarisation and angle
		$pol = sqrt(($q**2)+($u**2));
		
		# Following lines do non monte carlo symetric errors
		$pol_err = $pol * 0.5 * ((sqrt( ((2 * $q_err * $q)**2) + ((2 * $u_err * $u)**2))) / (($q*$q)+($u*$u)));
		$pol_err_minus = $pol_err;
		$pol_err_plus = $pol_err;
		
		# Following line does monte carlo asymmetric errors
		# ($null, $pol_err_minus, $pol_err_plus) = ripe::mcerror($q, $u, $q_err, $u_err);
   
    
		if ($q != 0 && $u != 0) {
			$beta = (atan2 $u,$q) / 2;
			$uOVERq_err = sqrt ((($u_err / $u)**2) + (($q_err / $q)**2)) * ($u / $q);
			$beta_err = $uOVERq_err / (1 + (($u / $q)**2)) / (2 * $pi) * 360;
			$beta_deg = (($beta / (2 * $pi)) * 360) + 90;
		}
    $pol_err_plus = 'NULL';
		# print "S1: $s1\nS1_err: $s1_err\nS2: $s2\nS2_err: $s2_err\nS3: $s3\nS3_err: $s3_err\n\n"; 
		$input->execute($s1, $s2, $s3, $q, $u, $q_err, $u_err, NULL, '', $pol_err_plus, $beta_deg, $beta_err, $id);
		$counter++;
		print "Processed: $counter\n";
		print "\r";
	}
}
  
  
  
  
  
