#!/usr/bin/perl 


# Main Perl script for processing RINGO2 fits files and populating grb database
# Doug Arnold May 2012


# PERL MODULES WE WILL BE USING
use DBI;
use DBD::mysql;
use File::Copy;
use lib '/home/disrail/ripe/lib';
use ripe;


# Debug options 
$DEBUG = 0;



# Check for TAG
if (!$ARGV[0]) {
  print "\nplease add a tag (id / memorable info etc) to label this set added to the db\n";
  die;
}

$tag = $ARGV[0];

#############################
# Obtain list of fits files #
#############################


# Set to local directory
$basepath=`pwd`;
chomp $basepath;
$ripedir = "/home/disrail/ripe";
# Open the directory.
opendir (DIR, $basepath)
or die "Unable to open $basepath: $!";

# Read in the fits files and sort them lexically
my @files =  sort grep {/fits/} readdir (DIR);

# Close the directory.
closedir (DIR);

    

# check that we have a multiple of 8 files
$no_files = @files;
if ($DEBUG) {
  print "No of files in Dir: $no_files\n";
  for (@files) {print "$_\n";}
}

#if ($no_files%8 != 0){ 
#  print "WARNING: Incomplete data set: Number of fits files not multiple of 8\n";
#  die;
#}
    


##############################
# Group files into data sets #
##############################


# Create array of only date and obs ID info in file, then remove duplicates using hashes
for (@files) {
  push(@data,  substr($_, 0, - 10));
}

my %hash = map { $_ => 1 } @data;
my @datasets = keys %hash;
$no_datasets = @datasets;
if ($DEBUG) { print "No of Datasets: $no_datasets\n"; for (@datasets) {print "$_\n";}}


# Create 2d array of datasets and filenames

for $dat (@datasets) {
  @tmp = grep (/^$dat/ , @files);
  $no_file = @tmp;
  if ($no_file != 8) {
    print "Error: Only $no_file files for dataset $dat. Ignoring this dataset!\n"
    }
  else {
    push @file_array, [ @tmp ];
    }
}
    



######################
# Open db connection #
######################



# PERL DBI CONNECT and Check tables exist
ripe::db_connect();



# Grab the sextractor default files and pop in local directory
copy("$ripedir/config/sex/ripe.param", "$basepath/ripe.param") or die "Copy of params failed: $!";
# Grab the aperture photometry settings
$apsize = `cat $ripedir/config/sex/ripe.sex | grep PHOT_APERTURES | sed 's/[^0-9:.]*//g'` ;
$backsize = `cat $ripedir/config/sex/ripe.sex | grep BACKPHOTO_THICK | sed 's/[^0-9:.]*//g'` ;

#################################################
# Loop through each data set: AKA THE BUSINESS! #
#################################################


# go through each dataset
for $ds (0 .. ($no_datasets-1)) {
  if ($DEBUG) {print "\n\nDataset no $ds\n";}
  
  
  $obs_id = substr($file_array[$ds][0], 0 , -11);
  $camera = substr($file_array[$ds][0], 0 , 1);
  print "Procesing [$ds/$no_datasets]\t\t$obs_id\r";
  
  # Grab fits info from 1st file in dataset
  undef @fits_headers;
  @fits_headers = ripe::fitsdat($file_array[$ds][0]);
  
  
  # Set the gain value in Source Extractor from the Number of frames
  # Then get the gain  and numfrms to record in the Database
  ripe::setgain($file_array[$ds][0]);
  $gain = ripe::getgain();
  $numfrms = ripe::numfrms($file_array[$ds][0]);
  
  
  
  # Populate dataset info into db if not duplicate then perform photometry
  $insert = $ripe::DB_grb->prepare_cached('INSERT INTO obs VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)');
  if ($insert->execute($obs_id, $camera, $tag, @fits_headers, $numfrms, $gain, $apsize, $backsize)) {
    # Populate photomertry database
    phot_tbl();
  }
}

 
 
 

# Restore folder to original untouched state
print "\n";
ripe::cleanup();

########################################
##########   END OF CODE ###############
########################################














######################################
############## SUBS ##################
######################################

sub phot_tbl {
# sextract all sources and populate photometry table 
  
  # for each orientation
  for $o (0 .. 7) { 
    # Run Sextractor 2>/dev/null
    $sex=`sex -c $ripedir/config/sex/ripe.sex $file_array[$ds][$o] -CATALOG_NAME $o.sex`;
    
    #Check that the header of the file shows correct orientation. Error Checking
    $rotnumber = `modhead $file_array[$ds][$o] RROTPOS | sed 's/[^1-8]*//g' | sed 's/18//g'`;
    chomp $rotnumber;
    if ($rotnumber != $o+1) {
      print "Failed on file $file_array[$ds][$o]\n";
      print "Rotator in fits is: $rotnumber\n";
      $o+=1;
      print "But in the file array should be: $o\n";
      die;
      
    }
  }
  
  # Modify all Source extractor files to remove hashed lines
  $shell = `sed '/#/d' 0.sex > 0r.sex`;
  $shell = `sed '/#/d' 1.sex > 1r.sex`;
  $shell = `sed '/#/d' 2.sex > 2r.sex`;
  $shell = `sed '/#/d' 3.sex > 3r.sex`;
  $shell = `sed '/#/d' 4.sex > 4r.sex`;
  $shell = `sed '/#/d' 5.sex > 5r.sex`;
  $shell = `sed '/#/d' 6.sex > 6r.sex`;
  $shell = `sed '/#/d' 7.sex > 7r.sex`;
  
  # Open Sextractor file
  open sex0, "0r.sex" or die $!;

    
  
  
  # Go through files and pull info of all orientations, and enter them into database
  $objcount=0;
  while ($s0 = <sex0>) {
 
      ($xpix0, $ypix0, $counts0, $counts_err0, $ra0, $dec0, $flag0) = split(" ",$s0);
      ($xpix1, $ypix1, $counts1, $counts_err1, $ra1, $dec1, $flag1) = ripe::sexcompanion("$xpix0", "$ypix0", "1r.sex");
      ($xpix2, $ypix2, $counts2, $counts_err2, $ra2, $dec2, $flag2) = ripe::sexcompanion("$xpix0", "$ypix0", "2r.sex");
      ($xpix3, $ypix3, $counts3, $counts_err3, $ra3, $dec3, $flag3) = ripe::sexcompanion("$xpix0", "$ypix0", "3r.sex");
      ($xpix4, $ypix4, $counts4, $counts_err4, $ra4, $dec4, $flag4) = ripe::sexcompanion("$xpix0", "$ypix0", "4r.sex");
      ($xpix5, $ypix5, $counts5, $counts_err5, $ra5, $dec5, $flag5) = ripe::sexcompanion("$xpix0", "$ypix0", "5r.sex");
      ($xpix6, $ypix6, $counts6, $counts_err6, $ra6, $dec6, $flag6) = ripe::sexcompanion("$xpix0", "$ypix0", "6r.sex");
      ($xpix7, $ypix7, $counts7, $counts_err7, $ra7, $dec7, $flag7) = ripe::sexcompanion("$xpix0", "$ypix0", "7r.sex");
      
      chomp $flag0;

      
      $flag_all = $flag0 + $flag1 + $flag2 + $flag3 + $flag4 + $flag5 + $flag6 + $flag7; 
      
      # Perform check that target exists in all lines;
      if ($xpix1!="notfound" && $xpix2!="notfound" && $xpix3!="notfound" && $xpix4!="notfound" && $xpix5!="notfound" && $xpix6!="notfound"  && $xpix7!="notfound") {
	

      
      
	# put info into database
	$insert = $ripe::DB_grb->prepare_cached('INSERT INTO photdata VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)');
	$insert->execute(null, $obs_id, $tag, null, $xpix0, $ypix0, $ra0, $dec0, $counts0, $counts1, $counts2, $counts3, $counts4, $counts5, $counts6, $counts7, $counts_err0, $counts_err1, $counts_err2, $counts_err3, $counts_err4, $counts_err5, $counts_err6, $counts_err7, $flag_all, null, null, null, null, null, null, null, null, null, null, null);
	}
	
	else {
	  print "Skipped target at $xpix0 : $ypix0\n";
	}
    
    
  } 
}
